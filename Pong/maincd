    /* Copyright (C) 2016 Marcelo Serrano Zanetti - All Rights Reserved

     * Licensed under the GNU GPL V3.0 license. All conditions apply.

     * Powered by Allegro: http://liballeg.org/license.html

     */



    #include <stdio.h>

    #include <allegro5/allegro.h>

    #include <allegro5/allegro_image.h>
    #include <allegro5/allegro_font.h>
    #include <allegro5/allegro_ttf.h>
    #include <allegro5/allegro_primitives.h>



    const float FPS = 90;

    const int SCREEN_W = 1024;

    const int SCREEN_H = 768;

    const int BOLA_TAMANHO = 77;

    const int REBATEDOR_LARGURA = 257;

    const int REBATEDOR_ALTURA = 506;

    const int BARALHO_LARGURA = 257;

    const int BARALHO_ALTURA = 506;



    int main(int argc, char **argv)

    {al_init_font_addon();
    al_init_ttf_addon();

        ALLEGRO_DISPLAY *display = NULL;

        ALLEGRO_EVENT_QUEUE *event_queue = NULL;

        ALLEGRO_TIMER *timer = NULL;



        if(!al_init())

        {

            fprintf(stderr, "failed to initialize allegro!\n");

            return -1;

        }

        timer = al_create_timer(1.0 / FPS);

        if(!timer)

        {

            fprintf(stderr, "failed to create timer!\n");

            return -1;

        }

        ALLEGRO_FONT *font = al_create_builtin_font();
    if (!font) {
        fprintf(stderr, "Erro ao criar fonte builtin!\n");
        return -1;
    }

        bool redraw = true;

      al_set_new_display_flags(ALLEGRO_WINDOWED);

        display = al_create_display(SCREEN_W, SCREEN_H);

        if(!display)

        {

            fprintf(stderr, "failed to create display!\n");

            al_destroy_timer(timer);

            return -1;

        }

        if(!al_install_keyboard())

        {

            fprintf(stderr, "failed to initialize the keyboard!\n");

            return -1;

        }

        if(!al_install_mouse())

        {

            fprintf(stderr, "failed to initialize the mouse!\n");

            return -1;

        }

        if(!al_init_image_addon())

        {

            fprintf(stderr, "failed to initialize the image addon!\n");

            return -1;

        }

        ALLEGRO_BITMAP *bola = NULL;

        ALLEGRO_BITMAP *rebatedorEsquerda = NULL;

        ALLEGRO_BITMAP *rebatedorDireita = NULL;

        ALLEGRO_BITMAP *background = NULL;

        ALLEGRO_BITMAP *baralho = NULL;

        ALLEGRO_BITMAP *carta[7] = {NULL};



        float bola_pos_x = SCREEN_W / 2.0 - BOLA_TAMANHO / 2.0;

        float bola_pos_y = SCREEN_H / 2.0 - BOLA_TAMANHO / 2.0;

        float bola_vx = -4;

        float bola_vy = -4;



        float rebatedorEsquerda_pos_x = 0;

        float rebatedorEsquerda_pos_y = SCREEN_H / 2.0 - REBATEDOR_ALTURA / 2.0;

        float rebatedorEsquerda_vy = 0;



        float rebatedorDireita_pos_x = SCREEN_W - REBATEDOR_LARGURA;

        float rebatedorDireita_pos_y = SCREEN_H / 2.0 - REBATEDOR_ALTURA / 2.0;

        float rebatedorDireita_vy = 0;

        float baralho_pos_x = SCREEN_W - BARALHO_LARGURA;

        float baralho_pos_y = SCREEN_H/1.5 /  - BOLA_TAMANHO / 2.0 ;

        float carta_pos_x[7];
        float carta_pos_y[7];
   int a;
        for(a=0;a<7;a++){
                carta_pos_x[a] = SCREEN_W/2 - BARALHO_LARGURA*1.5+ 100*a ;
           carta_pos_y[a] = SCREEN_H*2  - BARALHO_ALTURA*2 ;
        }



        int click=0;

        int savebvx;

        int savebvy;



        bola              =  al_load_bitmap("imagens/bola.png");

        rebatedorEsquerda = al_load_bitmap("imagens/maradona.png");

        rebatedorDireita  = al_load_bitmap("imagens/pele.png");

        background        = al_load_bitmap("imagens/campo.png");

        baralho=al_load_bitmap("imagens/baralho.png");

        for(a=0;a<7;a++){
    switch(a){
    case 0:
        carta[a]=al_load_bitmap("imagens/AO.png");

        break;
    case 1:
        carta[a]=al_load_bitmap("imagens/AE.png");

        break;
    case 2:
        carta[a]=al_load_bitmap("imagens/AC.png");

        break;
    case 3:
        carta[a]=al_load_bitmap("imagens/AP.png");

        break;
    case 4:
        carta[a]=al_load_bitmap("imagens/2O.png");

        break;
    case 5:
        carta[a]=al_load_bitmap("imagens/2E.png");

        break;
    case 6:
        carta[a]=al_load_bitmap("imagens/2C.png");

        break;



    }
        }
        if(!bola)

        {

            fprintf(stderr, "falhou ao criar a bola bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            return -1;

        }

        if(!rebatedorEsquerda)

        {

            fprintf(stderr, "falhou ao criar o rebatedoresquerda bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            al_destroy_bitmap(bola);

            return -1;

        }

        if(!rebatedorDireita)

        {

            fprintf(stderr, "falhou ao criar o rebatedordireita bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            al_destroy_bitmap(bola);

            al_destroy_bitmap(rebatedorEsquerda);

            return -1;

        }

        if(!background)

        {

            fprintf(stderr, "falhou ao criar o background bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            al_destroy_bitmap(bola);

            al_destroy_bitmap(rebatedorEsquerda);

            al_destroy_bitmap(rebatedorDireita);

            return -1;

        }


        if(!baralho)

        {

            fprintf(stderr, "falhou ao criar o baralho bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            al_destroy_bitmap(bola);

            al_destroy_bitmap(rebatedorEsquerda);

            al_destroy_bitmap(rebatedorDireita);

            return -1;

        }
        if(!carta[0])

        {

            fprintf(stderr, "falhou ao criar a carta bitmap!\n");

            al_destroy_display(display);

            al_destroy_timer(timer);

            al_destroy_bitmap(bola);

            al_destroy_bitmap(rebatedorEsquerda);

            al_destroy_bitmap(rebatedorDireita);

            return -1;

        }

        al_set_target_bitmap(al_get_backbuffer(display));



        event_queue = al_create_event_queue();

        if(!event_queue)

        {

            fprintf(stderr, "failed to create event_queue!\n");

            al_destroy_bitmap(bola);

            al_destroy_bitmap(rebatedorEsquerda);

            al_destroy_bitmap(rebatedorDireita);

            al_destroy_bitmap(background);

            al_destroy_display(display);

            al_destroy_timer(timer);

            return -1;

        }



        al_register_event_source(event_queue, al_get_display_event_source(display));

        al_register_event_source(event_queue, al_get_timer_event_source(timer));

        al_register_event_source(event_queue, al_get_keyboard_event_source());

        al_register_event_source(event_queue, al_get_mouse_event_source());



        al_clear_to_color(al_map_rgb(0,0,0));



        al_flip_display();



        al_start_timer(timer);



        while(1)

        {

            ALLEGRO_EVENT ev;

            al_wait_for_event(event_queue, &ev);



            if(ev.type==ALLEGRO_EVENT_MOUSE_BUTTON_DOWN)

            {

                switch(ev.mouse.button)

                {

                case 1:

                    printf("x:%d y:%d\n",ev.mouse.x, ev.mouse.y);

                    if(click==0)

                    {

                        savebvx=bola_vx;

                        savebvy=bola_vy;

                        bola_vx=0;

                        bola_vy=0;

                        click=1;

                    }

                    else

                    {

                        bola_vx=savebvx;

                        bola_vy=savebvy;

                        click=0;

                    }


                    if(ev.mouse.x >= baralho_pos_x &&
        ev.mouse.x <= baralho_pos_x + al_get_bitmap_width(baralho) &&
        ev.mouse.y >= baralho_pos_y &&
        ev.mouse.y <= baralho_pos_y +  al_get_bitmap_height(baralho)){
                        printf("baralho tocado");
                    }

bool carta_click[7];
                        for(a=0;a<7;a++){
       if(ev.mouse.x >= carta_pos_x[a] &&
        ev.mouse.x <= carta_pos_x[a] + al_get_bitmap_width(baralho) &&
        ev.mouse.y >= carta_pos_y[a] &&
        ev.mouse.y <= carta_pos_y[a] +  al_get_bitmap_height(baralho)){

                       if(carta_click[a]){
                       carta_pos_y[a]-=200;
                       carta_click[a]=false;
        }
                    else{
                       carta_pos_y[a]+=200;
                       carta_click[a]=true;
                    }

                        }

                }



            else if(ev.type == ALLEGRO_EVENT_TIMER)

            {

                if(bola_pos_y < 0 || bola_pos_y > SCREEN_H - BOLA_TAMANHO)

                {

                    bola_vy = -bola_vy;

                }



                if(bola_pos_x < 0 || bola_pos_x > SCREEN_W - BOLA_TAMANHO)

                {

                    bola_pos_x = SCREEN_W / 2.0 - BOLA_TAMANHO / 2.0;

                    bola_pos_y = SCREEN_H / 2.0 - BOLA_TAMANHO / 2.0;

                    bola_vx = -4, bola_vy = -4;

                }



                if(bola_pos_x <= rebatedorEsquerda_pos_x + REBATEDOR_LARGURA)

                    if(bola_pos_y+BOLA_TAMANHO>=rebatedorEsquerda_pos_y)

                        if(bola_pos_y-BOLA_TAMANHO<=rebatedorEsquerda_pos_y+REBATEDOR_ALTURA)

                            bola_vx = -bola_vx;



                if(bola_pos_x + BOLA_TAMANHO >= rebatedorDireita_pos_x )

                    if(bola_pos_y+BOLA_TAMANHO>=rebatedorDireita_pos_y)

                        if(bola_pos_y-BOLA_TAMANHO<=rebatedorDireita_pos_y+REBATEDOR_ALTURA)

                            bola_vx = -bola_vx;



                bola_pos_x              += bola_vx;

                bola_pos_y              += bola_vy;

                rebatedorEsquerda_pos_y += rebatedorEsquerda_vy;

                rebatedorDireita_pos_y  += rebatedorDireita_vy;

                redraw = true;

            }

            else if(ev.type == ALLEGRO_EVENT_KEY_DOWN)

            {

                switch(ev.keyboard.keycode)

                {

                case ALLEGRO_KEY_UP:

                    rebatedorDireita_vy=-4;

                    break;



                case ALLEGRO_KEY_DOWN:

                    rebatedorDireita_vy=4;

                    break;



                case ALLEGRO_KEY_W:

                    rebatedorEsquerda_vy=-4;

                    break;

                case ALLEGRO_KEY_S:

                    rebatedorEsquerda_vy=4;

                    break;





                case ALLEGRO_KEY_ESCAPE:

                    return 0;

                    break;

                }

            }

            else if(ev.type == ALLEGRO_EVENT_KEY_UP)

            {

                switch(ev.keyboard.keycode)

                {

                case ALLEGRO_KEY_UP:

                case ALLEGRO_KEY_DOWN:

                    rebatedorDireita_vy=0;

                    break;



                case ALLEGRO_KEY_W:

                case ALLEGRO_KEY_S:

                    rebatedorEsquerda_vy=0;

                    break;

                }

            }

            else if(ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE)

            {

                break;

            }



            if(redraw && al_is_event_queue_empty(event_queue))

            {

                redraw = false;



                al_clear_to_color(al_map_rgb(0,100,0));



               al_draw_scaled_bitmap(
        background,
        0, 0,                                  // origem da imagem (canto superior esquerdo)
        al_get_bitmap_width(background),       // largura da imagem original
        al_get_bitmap_height(background),      // altura da imagem original
        0, 0,                                  // onde desenhar na tela (canto superior esquerdo)
        SCREEN_W, SCREEN_H,                    // nova largura e altura (tamanho da tela)
        0                                      // flags
    );

                al_draw_bitmap(rebatedorEsquerda,rebatedorEsquerda_pos_x, rebatedorEsquerda_pos_y, 0);

                al_draw_bitmap(rebatedorDireita,rebatedorDireita_pos_x, rebatedorDireita_pos_y, 0);

                al_draw_bitmap(bola, bola_pos_x, bola_pos_y, 0);

                al_draw_bitmap(baralho, baralho_pos_x, baralho_pos_y, 0);
                for( a=0;a<7;a++){

                al_draw_bitmap(carta[a], carta_pos_x[a], carta_pos_y[a], 0);
                }
    char texto[50];
    sprintf(texto, "x:%.1f y:%.1f",rebatedorEsquerda_pos_y, rebatedorDireita_pos_y);
    al_draw_text(font, al_map_rgb(255, 255, 255), 20, 20, ALLEGRO_ALIGN_LEFT, texto);
                al_flip_display();

            }

        }



        al_destroy_bitmap(bola);

        al_destroy_bitmap(rebatedorEsquerda);

        al_destroy_bitmap(rebatedorDireita);

        al_destroy_timer(timer);

        al_destroy_display(display);

        al_destroy_event_queue(event_queue);



        return 0;

    }

